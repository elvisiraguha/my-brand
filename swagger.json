{
  "swagger" : "2.0",
  "info" : {
    "description" : "This is a RESTful API for my-brand \n[http://elvisiraguha.github.io/my-brand](http://elvisiraguha.github.io/my-brand)\n",
    "version" : "1.0.0",
    "title" : "My Brand",
    "contact" : {
      "email" : "iraguhaelvis@gmail.com"
    }
  },
  "tags" : [ {
    "name" : "articles",
    "description" : "All articles methods"
  }, {
    "name" : "queries",
    "description" : "All queries methods"
  }, {
    "name" : "auth",
    "description" : "Operations about user"
  } ],
  "paths" : {
    "/articles" : {
      "post" : {
        "tags" : [ "articles" ],
        "summary" : "Add a new article",
        "operationId" : "addArticle",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "A new article that needs to be added to articles collection",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Article"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created"
          },
          "400" : {
            "description" : "Bad request"
          },
          "403" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not found"
          },
          "405" : {
            "description" : "Invalid input"
          },
          "500" : {
            "description" : "Server Error"
          }
        }
      },
      "get" : {
        "tags" : [ "articles" ],
        "summary" : "Get all articles",
        "operationId" : "getArticles",
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "400" : {
            "description" : "Bad request"
          },
          "404" : {
            "description" : "Not found"
          },
          "500" : {
            "description" : "Server Error"
          }
        }
      }
    },
    "/articles/{id}" : {
      "get" : {
        "tags" : [ "articles" ],
        "summary" : "Find individual article",
        "operationId" : "getArticle",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "article id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "400" : {
            "description" : "Bad request"
          },
          "404" : {
            "description" : "Not found"
          },
          "500" : {
            "description" : "Server Error"
          }
        }
      },
      "patch" : {
        "tags" : [ "articles" ],
        "summary" : "Update individual article",
        "operationId" : "updateArticle",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "article id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Article"
              }
            }
          },
          "400" : {
            "description" : "Invalid status value"
          }
        },
        "security" : [ {
          "petstore_auth" : [ "write:pets", "read:pets" ]
        } ]
      },
      "delete" : {
        "tags" : [ "articles" ],
        "summary" : "Delete individual article",
        "operationId" : "deleteArticle",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "article id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Article"
              }
            }
          },
          "400" : {
            "description" : "Invalid status value"
          }
        },
        "security" : [ {
          "petstore_auth" : [ "write:pets", "read:pets" ]
        } ]
      }
    },
    "/queries" : {
      "get" : {
        "tags" : [ "queries" ],
        "summary" : "Updates a pet in the store with form data",
        "operationId" : "getQueries",
        "consumes" : [ "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "name" : "petId",
          "in" : "query",
          "description" : "ID of pet that needs to be updated",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "name",
          "in" : "formData",
          "description" : "Updated name of the pet",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "status",
          "in" : "formData",
          "description" : "Updated status of the pet",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "405" : {
            "description" : "Invalid input"
          }
        },
        "security" : [ {
          "petstore_auth" : [ "write:pets", "read:pets" ]
        } ]
      },
      "post" : {
        "tags" : [ "queries" ],
        "summary" : "Deletes a pet",
        "operationId" : "sendQuery",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "name" : "api_key",
          "in" : "header",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "petId",
          "in" : "query",
          "description" : "Pet id to delete",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Pet not found"
          }
        },
        "security" : [ {
          "petstore_auth" : [ "write:pets", "read:pets" ]
        } ]
      }
    },
    "/queries/:id" : {
      "patch" : {
        "tags" : [ "queries" ],
        "summary" : "Updates a pet in the store with form data",
        "operationId" : "updateQuery",
        "consumes" : [ "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "name" : "petId",
          "in" : "query",
          "description" : "ID of pet that needs to be updated",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "name",
          "in" : "formData",
          "description" : "Updated name of the pet",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "status",
          "in" : "formData",
          "description" : "Updated status of the pet",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "405" : {
            "description" : "Invalid input"
          }
        },
        "security" : [ {
          "petstore_auth" : [ "write:pets", "read:pets" ]
        } ]
      }
    },
    "/auth/signin" : {
      "get" : {
        "tags" : [ "auth" ],
        "summary" : "Logs user into the system",
        "operationId" : "signinUser",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "name" : "username",
          "in" : "query",
          "description" : "The user name for login",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "password",
          "in" : "query",
          "description" : "The password for login in clear text",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "string"
            },
            "headers" : {
              "X-Rate-Limit" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "calls per hour allowed by the user"
              },
              "X-Expires-After" : {
                "type" : "string",
                "format" : "date-time",
                "description" : "date in UTC when token expires"
              }
            }
          },
          "400" : {
            "description" : "Invalid username/password supplied"
          }
        }
      }
    }
  },
  "securityDefinitions" : {
    "petstore_auth" : {
      "type" : "oauth2",
      "authorizationUrl" : "http://petstore.swagger.io/oauth/dialog",
      "flow" : "implicit",
      "scopes" : {
        "write:pets" : "modify pets in your account",
        "read:pets" : "read your pets"
      }
    },
    "api_key" : {
      "type" : "apiKey",
      "name" : "api_key",
      "in" : "header"
    }
  },
  "definitions" : {
    "Article" : {
      "type" : "object",
      "properties" : {
        "title" : {
          "type" : "string"
        },
        "content" : {
          "type" : "string"
        },
        "imageUlr" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "Order"
      }
    },
    "Query" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "email" : {
          "type" : "string"
        },
        "subject" : {
          "type" : "string"
        },
        "message" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "Category"
      }
    },
    "User" : {
      "type" : "object",
      "properties" : {
        "email" : {
          "type" : "string"
        },
        "password" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "User"
      }
    },
    "Model" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    }
  },
  "schemes" : [ "https", "http" ],
  "host" : "https://my-brand.herokuapp.com",
  "basePath" : "/api"
}